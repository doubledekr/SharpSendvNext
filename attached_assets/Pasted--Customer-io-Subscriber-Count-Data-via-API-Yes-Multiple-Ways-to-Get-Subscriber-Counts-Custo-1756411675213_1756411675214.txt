# Customer.io Subscriber Count Data via API

## Yes - Multiple Ways to Get Subscriber Counts!

Customer.io provides several API endpoints to retrieve subscriber count data through both the **APP API** and **Export API**. Here are the available methods:

## ðŸ”‘ **Required API Keys**

- **APP API Key**: Required for most subscriber count operations
- **Export API Key**: Required for detailed data exports (optional)

## ðŸ“Š **Available Subscriber Count Methods**

### 1. **Segments API** (Recommended for SharpSend)

**Endpoint**: `GET https://api.customer.io/v1/segments`
**Authentication**: Bearer token (APP API Key)

```javascript
// Get all segments with subscriber counts
const response = await fetch('https://api.customer.io/v1/segments', {
  headers: {
    'Authorization': `Bearer ${appApiKey}`,
    'Content-Type': 'application/json'
  }
});

const segments = await response.json();
```

**Response Example**:
```json
{
  "segments": [
    {
      "id": 1,
      "name": "Growth Investors",
      "description": "Investors focused on growth stocks",
      "created": 1640995200,
      "updated": 1640995200,
      "type": "dynamic",
      "member_count": 2450
    },
    {
      "id": 2,
      "name": "Conservative Investors", 
      "description": "Risk-averse investors",
      "created": 1640995200,
      "updated": 1640995200,
      "type": "manual",
      "member_count": 1890
    }
  ]
}
```

### 2. **Individual Segment Details**

**Endpoint**: `GET https://api.customer.io/v1/segments/{segment_id}`

```javascript
// Get specific segment with detailed info
const response = await fetch(`https://api.customer.io/v1/segments/1`, {
  headers: {
    'Authorization': `Bearer ${appApiKey}`,
    'Content-Type': 'application/json'
  }
});

const segment = await response.json();
```

**Response Example**:
```json
{
  "segment": {
    "id": 1,
    "name": "Growth Investors",
    "description": "Investors focused on growth stocks",
    "created": 1640995200,
    "updated": 1640995200,
    "type": "dynamic",
    "member_count": 2450,
    "tags": ["growth", "investors"],
    "filters": {
      "and": [
        {"attribute": "investment_style", "operator": "eq", "value": "growth"},
        {"attribute": "risk_tolerance", "operator": "gte", "value": "medium"}
      ]
    }
  }
}
```

### 3. **Lists API** (Alternative Approach)

**Endpoint**: `GET https://api.customer.io/v1/lists`

```javascript
// Get all lists (static segments) with subscriber counts
const response = await fetch('https://api.customer.io/v1/lists', {
  headers: {
    'Authorization': `Bearer ${appApiKey}`,
    'Content-Type': 'application/json'
  }
});

const lists = await response.json();
```

**Response Example**:
```json
{
  "lists": [
    {
      "id": 1,
      "name": "VIP Subscribers",
      "created": 1640995200,
      "subscriber_count": 1200
    },
    {
      "id": 2,
      "name": "Newsletter Subscribers",
      "created": 1640995200,
      "subscriber_count": 5600
    }
  ]
}
```

### 4. **Export API for Detailed Counts**

**Endpoint**: `POST https://api.customer.io/v1/exports`

```javascript
// Export customer data with filters for counting
const response = await fetch('https://api.customer.io/v1/exports', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${appApiKey}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    "type": "customers",
    "filters": {
      "segment": {
        "id": 1
      }
    },
    "attributes": ["email", "created_at"]
  })
});

const exportJob = await response.json();
// Then poll for completion and get count from results
```

### 5. **Metrics API** (Campaign-specific counts)

**Endpoint**: `GET https://api.customer.io/v1/campaigns/{campaign_id}/metrics`

```javascript
// Get campaign metrics including recipient counts
const response = await fetch(`https://api.customer.io/v1/campaigns/123/metrics`, {
  headers: {
    'Authorization': `Bearer ${appApiKey}`,
    'Content-Type': 'application/json'
  }
});

const metrics = await response.json();
```

**Response Example**:
```json
{
  "metrics": {
    "sent": 2450,
    "delivered": 2398,
    "opened": 1876,
    "clicked": 456,
    "unsubscribed": 12,
    "bounced": 52
  }
}
```

## ðŸš€ **SharpSend Integration Implementation**

### Real-time Subscriber Counts for Segments

```javascript
class CustomerIOService {
  constructor(appApiKey) {
    this.appApiKey = appApiKey;
    this.baseUrl = 'https://api.customer.io/v1';
  }

  // Get all segments with subscriber counts
  async getSegmentsWithCounts() {
    try {
      const response = await fetch(`${this.baseUrl}/segments`, {
        headers: {
          'Authorization': `Bearer ${this.appApiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Transform for SharpSend format
      return data.segments.map(segment => ({
        id: segment.id,
        name: segment.name,
        description: segment.description,
        subscriberCount: segment.member_count,
        type: segment.type,
        lastUpdated: new Date(segment.updated * 1000)
      }));

    } catch (error) {
      console.error('Error fetching segments:', error);
      throw error;
    }
  }

  // Get total subscriber count across all segments
  async getTotalSubscriberCount() {
    try {
      const segments = await this.getSegmentsWithCounts();
      return segments.reduce((total, segment) => total + segment.subscriberCount, 0);
    } catch (error) {
      console.error('Error calculating total subscribers:', error);
      throw error;
    }
  }

  // Get subscriber count for specific segment
  async getSegmentSubscriberCount(segmentId) {
    try {
      const response = await fetch(`${this.baseUrl}/segments/${segmentId}`, {
        headers: {
          'Authorization': `Bearer ${this.appApiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      return data.segment.member_count;

    } catch (error) {
      console.error(`Error fetching segment ${segmentId}:`, error);
      throw error;
    }
  }
}
```

### Usage in SharpSend

```javascript
// Initialize Customer.io service
const customerIO = new CustomerIOService(appApiKey);

// Update SharpSend segments with real-time counts
async function syncSegmentCounts() {
  try {
    const customerIOSegments = await customerIO.getSegmentsWithCounts();
    
    // Update SharpSend segments display
    const updatedSegments = [
      {
        name: "Growth Investors",
        count: customerIOSegments.find(s => s.name === "Growth Investors")?.subscriberCount || 0,
        source: "customer.io"
      },
      {
        name: "Conservative Investors", 
        count: customerIOSegments.find(s => s.name === "Conservative Investors")?.subscriberCount || 0,
        source: "customer.io"
      },
      // ... other segments
    ];

    return updatedSegments;

  } catch (error) {
    console.error('Failed to sync segment counts:', error);
    // Fallback to cached counts or default values
    return getDefaultSegmentCounts();
  }
}

// Refresh counts periodically
setInterval(syncSegmentCounts, 300000); // Every 5 minutes
```

## ðŸ“ˆ **Advanced Subscriber Analytics**

### Subscriber Growth Tracking

```javascript
// Track subscriber growth over time
async function getSubscriberGrowth(segmentId, days = 30) {
  const endDate = new Date();
  const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));
  
  // Export historical data
  const exportResponse = await fetch('https://api.customer.io/v1/exports', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${appApiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      "type": "customers",
      "filters": {
        "segment": { "id": segmentId },
        "created_at": {
          "gte": Math.floor(startDate.getTime() / 1000)
        }
      },
      "attributes": ["email", "created_at"]
    })
  });

  // Process export results to calculate daily growth
  // Implementation depends on export completion polling
}
```

### Segment Overlap Analysis

```javascript
// Find subscribers in multiple segments
async function getSegmentOverlap(segmentIds) {
  const overlaps = {};
  
  for (const segmentId of segmentIds) {
    const response = await fetch(`https://api.customer.io/v1/segments/${segmentId}/customers`, {
      headers: {
        'Authorization': `Bearer ${appApiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    const customers = await response.json();
    overlaps[segmentId] = customers.customers.map(c => c.id);
  }
  
  // Calculate intersections
  return calculateOverlaps(overlaps);
}
```

## ðŸ”„ **Real-time Updates for SharpSend**

### Webhook Integration for Live Counts

```javascript
// Set up webhook to receive real-time updates
app.post('/webhooks/customerio', (req, res) => {
  const { type, data } = req.body;
  
  switch (type) {
    case 'customer.subscribed':
      // Update segment counts when someone subscribes
      updateSegmentCount(data.segment_id, 1);
      break;
      
    case 'customer.unsubscribed':
      // Update segment counts when someone unsubscribes  
      updateSegmentCount(data.segment_id, -1);
      break;
      
    case 'segment.updated':
      // Refresh segment data when segment changes
      refreshSegmentData(data.segment_id);
      break;
  }
  
  res.status(200).send('OK');
});
```

## ðŸ“‹ **API Rate Limits & Best Practices**

### Rate Limits
- **APP API**: 10,000 requests per hour
- **Segments endpoint**: No specific limit mentioned
- **Export API**: 100 exports per day

### Best Practices
```javascript
// Cache subscriber counts to reduce API calls
class SubscriberCountCache {
  constructor(ttl = 300000) { // 5 minutes default
    this.cache = new Map();
    this.ttl = ttl;
  }
  
  async getSegmentCount(segmentId, fetchFunction) {
    const cacheKey = `segment_${segmentId}`;
    const cached = this.cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < this.ttl) {
      return cached.count;
    }
    
    const count = await fetchFunction(segmentId);
    this.cache.set(cacheKey, {
      count,
      timestamp: Date.now()
    });
    
    return count;
  }
}
```

## ðŸŽ¯ **Integration with SharpSend Segments**

### Display Real-time Counts in Assignment Creation

```javascript
// When user creates assignment, show live subscriber counts
async function loadSegmentOptions() {
  const segments = await customerIO.getSegmentsWithCounts();
  
  return segments.map(segment => ({
    id: segment.id,
    name: segment.name,
    description: segment.description,
    subscriberCount: segment.subscriberCount.toLocaleString(),
    lastUpdated: segment.lastUpdated.toLocaleDateString()
  }));
}

// Update UI with real-time counts
function renderSegmentOptions(segments) {
  return segments.map(segment => `
    <div class="segment-option">
      <h3>${segment.name}</h3>
      <p>${segment.description}</p>
      <span class="subscriber-count">${segment.subscriberCount} subscribers</span>
      <small>Updated: ${segment.lastUpdated}</small>
    </div>
  `);
}
```

## âœ… **Summary**

**Yes, you can get comprehensive subscriber count data from Customer.io!**

### Available Data:
- âœ… **Total subscribers per segment/list**
- âœ… **Individual segment details and counts**
- âœ… **Historical subscriber growth**
- âœ… **Campaign recipient counts**
- âœ… **Real-time updates via webhooks**

### Required for SharpSend:
- **APP API Key** (currently missing from integration form)
- **Proper API implementation** in backend
- **Caching strategy** for performance

### Benefits for SharpSend:
- **Real-time subscriber counts** in segment selection
- **Accurate targeting data** for assignment creation
- **Performance metrics** for campaign optimization
- **Growth tracking** and analytics

The detailed implementation examples show exactly how to integrate this into SharpSend once the APP API Key field is added to the integration form!

